data="Youâ€™re not off the hook yet. We just discussed the structure of a basic paragraph, which includes 3 types of sentences. However, not all paragraphs will be 5 sentences long, and many paragraphs will utilize a myriad of different sentence types.Okay, you might be wondering, then how many sentences are in a paragraph? Well, it depends. Technically, a paragraph can be one sentence long, or it can be over seven sentences long.Some people argue that a paragraph should be measured by its ideas and not its sentence lengths, but a good general rule of thumb is to keep your paragraphs between 3 to 5 sentences long. This ensures that you are brief but still thorough in your writing."




data




import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import re




data = data.lower()
data





data = re.sub('[^a-zA-z0-9\s]','',data)
data




pip install tensorflow-cpu




pip install keras




import tensorflow 
from keras.preprocessing.text import Tokenizer
from keras.utils import pad_sequences
from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D






max_features = 2000
tokenizer = Tokenizer(num_words=max_features, split=' ')
tokenizer.fit_on_texts(data)
X = tokenizer.texts_to_sequences(data)
X = pad_sequences(X)






embed_dim = 128
lstm_out = 196
model = Sequential()
model.add(Embedding(max_features, embed_dim,input_length = X.shape[1]))
model.add(SpatialDropout1D(0.4))
model.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(2,activation='softmax'))
model.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])
print(model.summary())





twt = tokenizer.texts_to_sequences(data)
twt = pad_sequences(twt, maxlen=28, dtype='int32', value=0)
print(twt)
sentiment = model.predict(twt,batch_size=1,verbose = 2)[0]
if(np.argmax(sentiment) == 0):
    print("negative")
elif (np.argmax(sentiment) == 1):
    print("positive")





